// Generated by view binder compiler. Do not edit!
package com.example.myprojectloginapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myprojectloginapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityDoctorsDashboardBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView DoctorAppointments;

  @NonNull
  public final CardView DoctorPrescription;

  @NonNull
  public final CardView DoctorProfile;

  @NonNull
  public final CardView LearnMore;

  @NonNull
  public final ScrollView scrollView3;

  @NonNull
  public final TextView textView8;

  @NonNull
  public final Toolbar toolbar2;

  private ActivityDoctorsDashboardBinding(@NonNull ConstraintLayout rootView,
      @NonNull CardView DoctorAppointments, @NonNull CardView DoctorPrescription,
      @NonNull CardView DoctorProfile, @NonNull CardView LearnMore, @NonNull ScrollView scrollView3,
      @NonNull TextView textView8, @NonNull Toolbar toolbar2) {
    this.rootView = rootView;
    this.DoctorAppointments = DoctorAppointments;
    this.DoctorPrescription = DoctorPrescription;
    this.DoctorProfile = DoctorProfile;
    this.LearnMore = LearnMore;
    this.scrollView3 = scrollView3;
    this.textView8 = textView8;
    this.toolbar2 = toolbar2;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityDoctorsDashboardBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityDoctorsDashboardBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_doctors_dashboard, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityDoctorsDashboardBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Doctor_Appointments;
      CardView DoctorAppointments = ViewBindings.findChildViewById(rootView, id);
      if (DoctorAppointments == null) {
        break missingId;
      }

      id = R.id.Doctor_Prescription;
      CardView DoctorPrescription = ViewBindings.findChildViewById(rootView, id);
      if (DoctorPrescription == null) {
        break missingId;
      }

      id = R.id.Doctor_Profile;
      CardView DoctorProfile = ViewBindings.findChildViewById(rootView, id);
      if (DoctorProfile == null) {
        break missingId;
      }

      id = R.id.LearnMore;
      CardView LearnMore = ViewBindings.findChildViewById(rootView, id);
      if (LearnMore == null) {
        break missingId;
      }

      id = R.id.scrollView3;
      ScrollView scrollView3 = ViewBindings.findChildViewById(rootView, id);
      if (scrollView3 == null) {
        break missingId;
      }

      id = R.id.textView8;
      TextView textView8 = ViewBindings.findChildViewById(rootView, id);
      if (textView8 == null) {
        break missingId;
      }

      id = R.id.toolbar2;
      Toolbar toolbar2 = ViewBindings.findChildViewById(rootView, id);
      if (toolbar2 == null) {
        break missingId;
      }

      return new ActivityDoctorsDashboardBinding((ConstraintLayout) rootView, DoctorAppointments,
          DoctorPrescription, DoctorProfile, LearnMore, scrollView3, textView8, toolbar2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
